<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd" default-autowire="byName">
	
	<context:component-scan base-package="com.bpm,com.grx,com.slys" />
	
	<bean id="propertyConfigurer"
		class="com.bpm.framework.spring.config.DesPropertyPlaceholderConfigure">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
				<value>classpath*:schedule.properties</value>
				<value>classpath*:redis.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- alibaba druid -->
	 <bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接数量 -->
        <property name="initialSize" value="1" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 最大空闲连接数 
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        -->
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="1" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="60000" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="180" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="select id_ from fw_user where id_ = 1" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
	                监控统计用的filter:stat
	                日志用的filter:log4j
	               防御SQL注入的filter:wall -->
        <property name="filters" value="stat" />
	</bean>
	
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/bpm/**/mapper/*Mapper.xml</value>
				<value>classpath*:com/grx/**/mapper/*Mapper.xml</value>
				<value>classpath*:com/slys/**/mapper/*Mapper.xml</value>
			</list>
		</property>
		<property name="plugins">
			<list>
				<!-- 分页拦截器 -->
				<bean class="com.bpm.framework.plugins.mybatis.page.PageInterceptor">
					<property name="dialectClass" value="${jdbc.dialect}" />
				</bean>
				<bean class="com.bpm.framework.plugins.mybatis.interceptor.MybatisLogInterceptor">
					<property name="showSql" value="${jdbc.showSql}"></property>
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- 声明式事务 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<aop:config proxy-target-class="true">
		<!--
			This definition creates auto-proxy infrastructure based on the given
			pointcut, expressed in AspectJ pointcut language. Here: applying the
			advice named "txAdvice" to all methods on classes named PetStoreImpl.
		-->
		<aop:advisor pointcut="execution(* com.bpm..*Service.*(..)) 
								or execution(* com.grx..*Service.*(..))
								or execution(* org.snaker.engine.core..*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" read-only="false" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="page*" read-only="true" />
			<tx:method name="is*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 国际化文件配制，查找当前classpath以及jar包中的classpath,以第一个加载的属性KEY为主 -->
	<bean id="messageSource" class="com.bpm.framework.spring.ResourceBundleMessageSource">
		<property name="fileEncodings" value="UTF-8"/>
	    <property name="basenames">
	    	<list>
	    		<value>classpath*:com/bpm/**/i18n/**/messages*</value>
	    		<value>classpath*:com/grx/**/i18n/**/messages*</value>
    		</list>
	    </property>  
	    <!-- 为flase 消息code必须存在，否则会抛出异常  如果为true,目前会导致validateMessages中的消息不能格式化 -->
	    <property name="useCodeAsDefaultMessage" value="false"/>
	</bean>
	
</beans>